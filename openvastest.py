import subprocess
import time

def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print("Erreur lors de l'exécution de la commande :", e)
    except Exception as e:
        print("Une erreur s'est produite :", e)

def list_openvas_version(host, port, username, password):
    print("Liste de la version d'OpenVAS...")
    run_command(f"omp -h {host} -p {port} -u {username} -w {password} -O")

def list_openvas_targets(host, port, username, password):
    print("Liste des cibles OpenVAS...")
    run_command(f"omp -h {host} -p {port} -u {username} -w {password} -T")

def list_openvas_tasks(host, port, username, password):
    print("Liste des tâches OpenVAS...")
    run_command(f"omp -h {host} -p {port} -u {username} -w {password} -G")

def create_openvas_target(host, port, username, password, target):
    print("Création de la cible OpenVAS...")
    run_command(f"omp -h {host} -p {port} -u {username} -w {password} --xml '<create_target><name>{target}</name><hosts>{target}</hosts></create_target>'")

def create_openvas_task(host, port, username, password, target, asset_id):
    print("Création de la tâche de scan OpenVAS...")
    command = f"omp -h {host} -p {port} -u {username} -w {password} --xml '<create_task><name>{target}</name><preferences><preference><scanner_name>source_iface</scanner_name><value>eth0</value></preference></preferences><config id=\"74db13d6-7489-11df-91b9-002264764cea\"/><target id=\"{asset_id}\"/></create_task>'"
    run_command(command)

def start_openvas_task(host, port, username, password, task_id):
    print("Démarrage de la tâche de scan OpenVAS...")
    run_command(f"omp -h {host} -p {port} -u {username} -w {password} --xml '<start_task task_id=\"{task_id}\"/>'")

def monitor_task_completion(host, port, username, password, task_id):
    while True:
        task_info = subprocess.run(f"omp -h {host} -p {port} -u {username} -w {password} -G | grep {task_id}", shell=True, capture_output=True, text=True)
        if "Done" in task_info.stdout:
            print("Scan terminé.")
            break
        else:
            print("Scan en cours...")
            time.sleep(60)

if __name__ == "__main__":
    OPENVAS_HOST = "172.22.0.3"
    OPENVAS_PORT = "9390"
    OPENVAS_USERNAME = "admin"  # Utilisateur par défaut
    OPENVAS_PASSWORD = "admin"  # Mot de passe par défaut
    TARGET = input("Entrez la cible à scanner : ")

    # Lancement d'OpenVAS
    run_command("sudo openvas-start 2> /dev/null > /dev/null")

    # Affichage des informations d'OpenVAS
    print("==============================================================")
    print(f"  Début du scan OpenVAS [{time.strftime('%Y-%m-%d %H:%M')}]\n")
    list_openvas_version(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD)
    list_openvas_targets(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD)
    list_openvas_tasks(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD)
    print("==============================================================\n")

    # Création de la cible OpenVAS
    create_openvas_target(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD, TARGET)

    # Création de la tâche de scan OpenVAS
    asset_id = subprocess.run(f"omp -h {OPENVAS_HOST} -p {OPENVAS_PORT} -u {OPENVAS_USERNAME} -w {OPENVAS_PASSWORD} --xml '<create_target><name>{TARGET}</name><hosts>{TARGET}</hosts></create_target>' | xmlstarlet sel -t -v /create_target_response/@id", shell=True, capture_output=True, text=True).stdout.strip()
    create_openvas_task(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD, TARGET, asset_id)

    # Démarrage de la tâche de scan OpenVAS
    task_id = subprocess.run(f"omp -h {OPENVAS_HOST} -p {OPENVAS_PORT} -u {OPENVAS_USERNAME} -w {OPENVAS_PASSWORD} --xml '<create_task><name>{TARGET}</name><preferences><preference><scanner_name>source_iface</scanner_name><value>eth0</value></preference></preferences><config id=\"74db13d6-7489-11df-91b9-002264764cea\"/><target id=\"{asset_id}\"/></create_task>' | xmlstarlet sel -t -v /create_task_response/@id", shell=True, capture_output=True, text=True).stdout.strip()
    start_openvas_task(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD, task_id)

    # Surveillance de l'achèvement de la tâche de scan OpenVAS
    monitor_task_completion(OPENVAS_HOST, OPENVAS_PORT, OPENVAS_USERNAME, OPENVAS_PASSWORD, task_id)
